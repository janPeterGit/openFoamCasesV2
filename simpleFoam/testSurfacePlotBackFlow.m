clc
clear all
close all

% stl = stlread('backFLowSurfaceTestWin0.stl');

%%

% Read CSV
fileCSV = importfile('backFlowClipTest00.csv');

x = fileCSV.Points0;
y = fileCSV.Points1;
z = fileCSV.Points2;

magU = fileCSV.magU;

% Read the STL file
[TR,fileformat,attributes,solidID] = stlread("backFLowSurfaceTestWin0000.stl");
cylinderFile = stlread('cylinderD050L474W090dZ002.stl');

font = 'Arial';
fontSize = 10;
f = figure('DefaultTextFontName', font, ...
    'DefaultAxesFontName', font,...
    'DefaultAxesFontSize',fontSize, ...
    'DefaultTextFontSize',fontSize);
f.Name = 'Forces Specific Momentum';
f.Color = [1 1 1];
f.Units = 'centimeters';
f.InnerPosition = [2 2 14.7 8];

hold on



% trimesh(TR)
mesh = trisurf(TR);
% mesh.FaceColor = [0 0.4470 0.7410];
% mesh.EdgeColor = 'none';
mesh.FaceAlpha = .6;
% mesh.CData = magU;
view([30 30])

xlim([-0.3 1])
ylim([-0.395 0.395])
% zlim([0 .1])

xticks(-.2:.2:2)
% 
% camlight('headlight');
% material('dull');
% light("Position",[-10 -10 0]);
% light("Position",[0 0 20]);
shading flat

cb = colorbar;
colormap(flipud(sky))

cb.Location = "northoutside";
% cb.Direction = "reverse";
cb.Label.String = '$h$ in m';
cb.TickLabelInterpreter = 'latex';
cb.Label.Interpreter = 'latex';

cylinder = trisurf(cylinderFile);
cylinder.FaceColor = [0.6350 0.0780 0.1840];
cylinder.EdgeColor = 'none';

daspect([1 1 1])

grid on
box off

ylabel('$y$ in m','Interpreter','latex')
xlabel('$x$ in m','Interpreter','latex')
zlabel('$z$ in m','Interpreter','latex')

set(gca,'TickLabelInterpreter','latex')

figName = ['test.png'];
exportgraphics(f,figName,'Resolution',300)


%%

fileCSV = importfile('backFlowClipTest00.csv');

x = fileCSV.Points0;
y = fileCSV.Points1;
z = fileCSV.Points2;

magU = fileCSV.magU;

uniqueX = unique(x);
uniqueY = unique(y);
uniqueZ = unique(z);

xlin = min(x):0.005:max(x); % Adjust based on unique values
ylin = min(y):0.005:max(y);
zlin = min(z):0.005:max(z);

% Create the grid
[Xgrid, Ygrid] = ndgrid(xlin, ylin);

Zgrid = griddata(x,y,z,Xgrid,Ygrid);

surf(Xgrid,Ygrid,Zgrid)
shading interp
% scatter3(x,y,z,'.');

daspect([1 1 1])

xlabel('X');
ylabel('Y');
zlabel('Z');
% axis tight; % Adjust the axis limits to fit the data
grid on;



%% functions
function importSurfaceCSV = importfile(filename, dataLines)
%IMPORTFILE Import data from a text file
%  BACKFLOWSURFACETEST0 = IMPORTFILE(FILENAME) reads data from text file
%  FILENAME for the default selection.  Returns the data as a table.
%
%  BACKFLOWSURFACETEST0 = IMPORTFILE(FILE, DATALINES) reads data for the
%  specified row interval(s) of text file FILENAME. Specify DATALINES as
%  a positive scalar integer or a N-by-2 array of positive scalar
%  integers for dis-contiguous row intervals.
%
%  Example:
%  backFlowSurfaceTest0 = importfile("D:\GitHub\openFoamCasesV2\simpleFoam\backFlowSurfaceTest0.csv", [2, Inf]);
%
%  See also READTABLE.
%
% Auto-generated by MATLAB on 22-Feb-2024 10:25:49

%% Input handling

% If dataLines is not specified, define defaults
if nargin < 2
    dataLines = [2, Inf];
end

%% Set up the Import Options and import the data
opts = delimitedTextImportOptions("NumVariables", 19);

% Specify range and delimiter
opts.DataLines = dataLines;
opts.Delimiter = ",";

% Specify column names and types
opts.VariableNames = ["Co", "U0", "U1", "U2", "Ux", "Uy", "Uz", "k", "magU", "nut", "omega", "p", "wallShearStress0", "wallShearStress1", "wallShearStress2", "yPlus", "Points0", "Points1", "Points2"];
opts.VariableTypes = ["double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double"];

% Specify file level properties
opts.ExtraColumnsRule = "ignore";
opts.EmptyLineRule = "read";

% Import the data
importSurfaceCSV = readtable(filename, opts);

end

function[]= draw_rectangle(center_location,L,H,deg,rgb)

theta=deg*pi/180;
center1=center_location(1);
center2=center_location(2);

R= ([cos(theta), -sin(theta); sin(theta), cos(theta)]);

X=([-L/2, L/2, L/2, -L/2]);
Y=([-H/2, -H/2, H/2, H/2]);

for i=1:4
T(:,i)=R*[X(i); Y(i)];
end

x_lower_left=center1+T(1,1);
x_lower_right=center1+T(1,2);
x_upper_right=center1+T(1,3);
x_upper_left=center1+T(1,4);

y_lower_left=center2+T(2,1);
y_lower_right=center2+T(2,2);
y_upper_right=center2+T(2,3);
y_upper_left=center2+T(2,4);

x_coor=[x_lower_left x_lower_right x_upper_right x_upper_left];
y_coor=[y_lower_left y_lower_right y_upper_right y_upper_left];

plotPatch = patch('Vertices',[x_coor; y_coor]','Faces',[1 2 3 4],'Edgecolor','none','Facecolor',rgb);
plotPatch.DisplayName = "Zylinder";
% plotPatch.HandleVisibility = "off";
% axis equal;

end